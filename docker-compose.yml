version: '3.8'

services:
  # 后端API服务
  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: file-system-api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - MAX_FILE_SIZE=104857600  # 100MB
      - UPLOAD_DIR=/app/uploads
      - LOG_LEVEL=info
      - PICKUP_CODE_LENGTH=6
      - FILE_EXPIRY_DAYS=7
      - FRONTEND_URL=http://localhost
      # 安全配置
      - SESSION_SECRET=${SESSION_SECRET:-change-this-secret-key}
      - JWT_SECRET=${JWT_SECRET:-change-this-jwt-secret}
      # 速率限制
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - UPLOAD_RATE_LIMIT=5
      - VERIFY_RATE_LIMIT=10
      - DOWNLOAD_RATE_LIMIT=20
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
      - backups_data:/app/backups
      - temp_data:/app/temp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true

  # 前端Web服务
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: file-system-web
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true

  # Redis缓存服务（可选）
  redis:
    image: redis:7-alpine
    container_name: file-system-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis-password}

volumes:
  uploads_data:
    driver: local
  logs_data:
    driver: local
  backups_data:
    driver: local
  temp_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
    name: file-system-network
